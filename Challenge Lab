Task 1: Create a project jumphost instance
	name the instance= nucleus-jumphost
	Check for the default region or zone
	use the machine type of= f1-micro
	use the default image type (Debian Linux)
	Tick Allow HTTP Traffic
	Finaly Create the instance 
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
Task 2: Create a Kubernetes service cluster

	2.1 Create a cluster (in the us-east1 region) to host the service
		gcloud config set compute/zone us-east1-b
		gcloud container clusters create nucleus-webserver1
		gcloud container cluster get-credentials nucleus-webserver1

	2.2 Use the Docker container hello-app (`gcr.io/google-samples/hello-app:2.0`) as a place holder,the team will replace the container with their own work later
		kubectl create deployment hello-app --image=gcr.io/google-samples/hello-app:2.0

	2.3 Expose the app on port 8080
		kubectl expose deployment hello-app --type=LoadBalancer --port 8080
		kubectl get service

-------------------------------------------------------------------------------------------------------------------------------------
Task 3: Setup an HTTP load balancer	
		
	cat << EOF > startup.sh
	#! /bin/bash
	apt-get update
	apt-get install -y nginx
	service nginx start
	sed -i -- 's/nginx/Google Cloud Platform - '"\$HOSTNAME"'/' /var/www/html/index.nginxdebian.
	html
	EOF	


	3.1 Create an instance template

		gcloud compute instance-templates create nucleus-nginx-template --metadata-from-file startup-script=startup.sh

	3.2 Create a target pool

		gcloud compute target-pools create nginx-pool	
		(Choose the default location)
		
	3.3 Create a managed instance group
		gcloud compute instance-groups managed create nginx-group --base-instance-name nginx --size 2 --template nginx-template --target-pool nucleus-nginx-pool

		To View the instance 
		gcloud compute instances list

	3.4 Create a firewall rule to allow traffic (80/tcp)

		gcloud compute firewall-rules create www-firewall --allow tcp:80

		To Check it's working 
       		http://EXTERNAL_IP/

	3.5 Create a health check

		gcloud compute forwarding-rules create nginx-1b --region us-east --ports=80 --target-pool nginx-pool		
                gcloud compute forwarding-rules list 
		gcloud compute http-health-checks create http-basic-check
		gcloud compute instance-groups managed set-named=ports nginx-group --named-ports http:80

		
	3.6 Create a backend service and attach the manged instance group
	
		gcloud compute backend-services create nginx-backend --protocol HTTP --http-health-checks http-basic-check --global
    		gcloud compute backend-services add-backend nginx-backend --instance-group nginx-group --instance-group-zone us-east1-b --global


	3.7 Create a URL map and target HTTP proxy to route requests to your URL map

		gcloud compute url-maps create web-map --default-service nginx-backend

		gcloud compute target-http-proxies create http-lb-proxy --url-map web-map

	3.8 Create a forwarding rule

		gcloud compute forwarding-rules create http-content-rule --global --target-http-proxy http-lb-proxy --ports 80


		gcloud compute forwarding-rules list


